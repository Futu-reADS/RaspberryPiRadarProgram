import numpy as np

class Filter:
    
    coefficients_lowpass_HR = [7.7519e-05, -2.1943e-19, -0.00017507, -0.0002844, -0.0001234, 0.00030536, 0.00066201,
                            0.0004875, -0.00031655, -0.0011887, -0.0012209, 1.9897e-18, 0.0017329, 0.0023996,
                            0.00091246, -0.0020194, -0.0039765, -0.0026926, 0.001624, 0.0057127, 0.0055361,
                            -5.7122e-18, -0.007128, -0.0094788, -0.003479, 0.0074684, 0.014336, 0.0095102, -0.0056493,
                            -0.019686, -0.019019, 9.8548e-18, 0.024919, 0.033935, 0.01293, -0.029337, -0.061027,
                            -0.045529, 0.032296, 0.15036, 0.25711, 0.30003, 0.25711, 0.15036, 0.032296, -0.045529,
                            -0.061027, -0.029337, 0.01293, 0.033935, 0.024919, 9.8548e-18, -0.019019, -0.019686,
                            -0.0056493, 0.0095102, 0.014336, 0.0074684, -0.003479, -0.0094788, -0.007128, -5.7122e-18,
                            0.0055361, 0.0057127, 0.001624, -0.0026926, -0.0039765, -0.0020194, 0.00091246, 0.0023996,
                            0.0017329, 1.9897e-18, -0.0012209, -0.0011887, -0.00031655, 0.0004875, 0.00066201,
                            0.00030536, -0.0001234, -0.0002844, -0.00017507, -2.1943e-19, 7.7519e-05]
    coefficients_highpass_HR = [7.7519e-05, -2.1943e-19, -0.00017507, -0.0002844, -0.0001234, 0.00030536, 0.00066201,
                            0.0004875, -0.00031655, -0.0011887, -0.0012209, 1.9897e-18, 0.0017329, 0.0023996,
                            0.00091246, -0.0020194, -0.0039765, -0.0026926, 0.001624, 0.0057127, 0.0055361,
                            -5.7122e-18, -0.007128, -0.0094788, -0.003479, 0.0074684, 0.014336, 0.0095102, -0.0056493,
                            -0.019686, -0.019019, 9.8548e-18, 0.024919, 0.033935, 0.01293, -0.029337, -0.061027,
                            -0.045529, 0.032296, 0.15036, 0.25711, 0.30003, 0.25711, 0.15036, 0.032296, -0.045529,
                            -0.061027, -0.029337, 0.01293, 0.033935, 0.024919, 9.8548e-18, -0.019019, -0.019686,
                            -0.0056493, 0.0095102, 0.014336, 0.0074684, -0.003479, -0.0094788, -0.007128, -5.7122e-18,
                            0.0055361, 0.0057127, 0.001624, -0.0026926, -0.0039765, -0.0020194, 0.00091246, 0.0023996,
                            0.0017329, 1.9897e-18, -0.0012209, -0.0011887, -0.00031655, 0.0004875, 0.00066201,
                            0.00030536, -0.0001234, -0.0002844, -0.00017507, -2.1943e-19, 7.7519e-05]
    coefficients_lowpass_RR = [0.0070364,0.0066417,0.0057247,0.0042833,0.0023512,-2.4633e-18,-0.0026617,-0.0054911,-0.0083163,-0.010944,-0.01317,-0.014787,-0.015601,-0.015437,-0.014158,-0.011667,-0.0079212,-0.0029361,0.0032129,0.01039,0.018402,0.027005,0.035918,0.044827,0.053409,0.061339,0.06831,0.074046,0.078319,0.080954,0.081844,0.080954,0.078319,0.074046,0.06831,0.061339,0.053409,0.044827,0.035918,0.027005,0.018402,0.01039,0.0032129,-0.0029361,-0.0079212,-0.011667,-0.014158,-0.015437,-0.015601,-0.014787,-0.01317,-0.010944,-0.0083163,-0.0054911,-0.0026617,-2.4633e-18,0.0023512,0.0042833,0.0057247,0.0066417,0.0070364]
    coefficients_highpass_RR =[-0.0063866,-0.0065304,-0.0066728,-0.0068139,-0.0069535,-0.0070917,-0.0072282,-0.007363,-0.007496,-0.0076272,-0.0077564,-0.0078836,-0.0080087,-0.0081316,-0.0082522,-0.0083705,-0.0084863,-0.0085997,-0.0087105,-0.0088187,-0.0089242,-0.0090269,-0.0091268,-0.0092237,-0.0093177,-0.0094087,-0.0094966,-0.0095814,-0.009663,-0.0097413,-0.0098163,-0.009888,-0.0099563,-0.010021,-0.010083,-0.01014,-0.010195,-0.010245,-0.010293,-0.010336,-0.010376,-0.010412,-0.010444,-0.010473,-0.010497,-0.010518,-0.010536,-0.010549,-0.010559,-0.010564,0.99575,-0.010564,-0.010559,-0.010549,-0.010536,-0.010518,-0.010497,-0.010473,-0.010444,-0.010412,-0.010376,-0.010336,-0.010293,-0.010245,-0.010195,-0.01014,-0.010083,-0.010021,-0.0099563,-0.009888,-0.0098163,-0.0097413,-0.009663,-0.0095814,-0.0094966,-0.0094087,-0.0093177,-0.0092237,-0.0091268,-0.0090269,-0.0089242,-0.0088187,-0.0087105,-0.0085997,-0.0084863,-0.0083705,-0.0082522,-0.0081316,-0.0080087,-0.0078836,-0.0077564,-0.0076272,-0.007496,-0.007363,-0.0072282,-0.0070917,-0.0069535,-0.0068139,-0.0066728,-0.0065304,-0.0063866] 
    
    def __init__(self,filter):
        if filter == 'highpass_HR':
            self.coefficients = Filter.coefficients_highpass_HR
        elif filter == 'lowpass_HR':
            self.coefficients = Filter.coefficients_lowpass_HR
        elif filter == 'highpass_RR':
            self.coefficients = Filter.coefficients_highpass_RR
        elif filter == 'lowpass_RR':
            self.coefficients = Filter.coefficients_lowpass_RR
        
        self.length_of_input_vector = len(self.coefficients)  # Length of coefficient vector and length of input vector
        self.input_vector = np.zeros(self.length_of_input_vector)  # the same length as coefficients.
        self.input_vector_index = 0  # to know where the latest input value is in input_vector


    def filter(self, input_value):  # send input value
        self.input_vector[self.input_vector_index] = input_value  # saves the input data in a vector continuously

        output = 0  # to add all coefficients*values
        iterate_index = self.input_vector_index  # because variable value is changed in order to loop array
        for i in range(0, self.length_of_input_vector - 1):  # iterate over all coefficients and relevant input values
            if iterate_index - i < 0:  # if iterate_index is negative begin from right hand side and work our way to the left
                iterate_index = self.length_of_input_vector + i - 1  # moving to the rightmost location of array
            output += self.coefficients[i] * self.input_vector[iterate_index - i]  # add value of coefficient*data

        self.input_vector_index += 1  # Note index += 1 before if statement
        if self.input_vector_index == self.length_of_input_vector:  # len(input_vector = N)
            self.input_vector_index = 0
        return output



