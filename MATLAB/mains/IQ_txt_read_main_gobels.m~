addpath(genpath(pwd))
addpath('Dataread')
addpath('tracker')
clc
clear all
format shorteng
%addpath("IQ Read")
%addpath("Target tracking")

filename = 'Manniska_Sweep100_0227_Test1.csv'%kort fil
%filename = 'Manniska_1_Sweep100.csv'%lång fil?

[dist,amp, phase,t,gain, L_start, L_end, L_data, L_seq, Fs] = IQ_read_3(filename);
gain = gain
L_start = L_start
L_end = L_end
L_data = L_data
L_seq = L_seq
Fs = Fs
c = 3e8;%[m/s] 
fc = 60.5e9;% [Hz]
wavelength = c/fc

S_amp = size(amp)
%test of matched filter
MF = amp(1,:).*(cos(phase(1,:)) + 1i*sin(phase(1,:)) );%get the first vector for matched filter
MF = flip(MF);
Emf = sum(abs(MF).^2);
%conv(data,filter,SHAPE,'same');

for i = 1:L_seq
    filtered_refl(i,:) = filter(MF,Emf, (amp(i,:).*(cos(phase(i,:)) + 1i*sin(phase(i,:)) ) ));
    i = i + 1;
end

%amp = abs(filtered_refl);
%phase = angle(filtered_refl);

[T,D,A,P] = SURF_PREP(dist,amp, phase,t);


%Detektering och följning utav mål
start_distance = 0.37%m
N_avg = 10;
[t,target_amplitude, target_phase, target_distance] = target_tracker_2(t,dist,amp,phase,start_distance,N_avg);

figure(1)
subplot(1,2,1)
plot(dist,amp(1,:))
ylabel('Amplitude []')
xlabel('Distance [m]')


subplot(1,2,2)
plot(dist,phase(1,:))
ylabel('phase []')
xlabel('Distance [m]')

%surf test
figure(2)
surf(T,D,A)
ylabel('Distance [m]')
xlabel('Time [s]')
zlabel('Reflection amplitude')

figure(3)
surf(T,D,P)
ylabel('Distance [m]')
xlabel('Time [s]')
zlabel('Reflection phase [rad]')


%unwrap test
target_phase = unwrap(target_phase);


%Signal filtreringstest
disp('Downsampling with ratio r:')
r = 6
%Down sampling
target_amplitude = decimate(target_amplitude,r);
target_phase = decimate(target_phase,r);
target_distance = decimate(target_distance,r);
t = decimate(t,r);
L_seq = L_seq/r%new length in time domain
Fs = Fs/r%New sample rate in time domain


%Delta distance of tracked target
target_delta_distance = wavelength/2/pi/2*target_phase;

F_low = 0.85
F_high = 6
BWrel_transband = 0.2
Atten_stopband = 60
[target_delta_distance] = bandpassfilter(target_delta_distance,Fs,F_low,F_high,BWrel_transband,Atten_stopband);

% %test of filter on delta distance
% F_low_1 = 0.7
% F_low_2 = 0.85
% 
% F_high_1 = 6
% F_high_2 = 7
% Atten_stopband = 60
% %target_delta_distance = highpass(target_delta_distance,F_low,Fs);
% %target_delta_distance = lowpass(target_delta_distance,F_high,Fs);
% 
% %Kaiser filter test start
% LpFilt = designfilt('lowpassfir', ...
%                     'PassbandFrequency',F_high_1, ...
%                     'StopbandFrequency',F_high_2, ...
%                     'PassbandRipple',0.1, ...
%                     'StopbandAttenuation',Atten_stopband, ...
%                     'SampleRate',Fs, ...
%                     'DesignMethod','kaiserwin');
%                 
% HpFilt = designfilt('highpassfir', ...
%                     'PassbandFrequency',F_low_2, ...
%                     'StopbandFrequency',F_low_1, ...
%                     'PassbandRipple',0.1, ...
%                     'StopbandAttenuation',Atten_stopband, ...
%                     'SampleRate',Fs, ...
%                     'DesignMethod','kaiserwin');
%                 %fvtool(HpFilt)
% target_delta_distance = filter(LpFilt,target_delta_distance);
% target_delta_distance = filter(HpFilt,target_delta_distance);

%Windowing
%W = window(@flattopwin,1,L_seq)';
W = rectwin(L_seq)';
target_amplitude = target_amplitude .* W;
target_phase = target_phase .* W;
target_delta_distance = target_delta_distance .* W;


% %Padded FFT
% FFT_resolution = 0.01%[Hz resolution]
% L_fft = 2 * round (max(Fs/FFT_resolution,L_seq)/2 )%needed length of FFT, or orignial.
% f = Fs*(0:(L_fft/2))/L_fft;
% 
% Y = fft(target_delta_distance,L_fft);
% P2 = abs(Y/L_fft);
% P1 = P2(1:L_fft/2+1);
% P1(2:end-1) = 2*P1(2:end-1);
% target_delta_distance_fft = P1;%FFT for delta distance from phase of target
F_resolution = 0.01 %[Hz]
[f,target_delta_distance_fft] = smartFFT_abs(target_delta_distance,Fs,F_resolution);

figure(5)
plot(f,target_delta_distance_fft)
ylabel('Amplitudes of tones in reflection phase [m]')
xlabel('f [Hz]')


figure(6)
subplot(2,2,1)
plot(t,target_amplitude)
xlabel('t [s]')
ylabel('Amplitude of tracked target [arb]')

subplot(2,2,2)
plot(t,target_phase)
xlabel('t [s]')
ylabel('Phase of tracked target [rad]')

subplot(2,2,3)
plot(t,target_distance)
xlabel('t [s]')
ylabel('Distance of tracked target [m]')

subplot(2,2,4)
plot(t,5e-3/2/pi/2*(target_phase - mean(target_phase)))
xlabel('t [s]')
ylabel('Delta distance of tracked target [m]')









